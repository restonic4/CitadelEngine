import java.text.SimpleDateFormat

plugins {
    id 'java'
    id 'application'
}

group = "${group}"
version = "${version}"
mainClassName = "${mainClass}"

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    //LWJGL
    implementation platform("org.lwjgl:lwjgl-bom:${lwjglVersion}")

    //JOML - 3D math
    implementation "org.joml:joml:${jomlVersion}"

    //LWJGL
    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-glfw"      // Windows management
    implementation "org.lwjgl:lwjgl-opengl"    // OpenGL 3D
    implementation "org.lwjgl:lwjgl-stb"       // Images/assets loader
    implementation "org.lwjgl:lwjgl-openal"    // OpenAL for audio
    //implementation "io.github.spair:imgui-java-binding:${imguiJavaVersion}" // ImGui for GUI
    //implementation "org.lwjgl:lwjgl-assimp" // Assimp for complex models


    //Windows
    runtimeOnly "org.lwjgl:lwjgl::${lwjglNatives}"
    runtimeOnly "org.lwjgl:lwjgl-glfw::${lwjglNatives}"
    runtimeOnly "org.lwjgl:lwjgl-opengl::${lwjglNatives}"
    runtimeOnly "org.lwjgl:lwjgl-stb::${lwjglNatives}"
    runtimeOnly "org.lwjgl:lwjgl-openal::${lwjglNatives}"
    //runtimeOnly "io.github.spair:imgui-java-${imguiNatives}:${imguiJavaVersion}"
    //runtimeOnly "org.lwjgl:lwjgl-assimp::${lwjglNatives}"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jar {
    manifest {
        attributes(
                'Main-Class': "${mainClass}",
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    from('resources') {
        into 'resources'
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveBaseName.set("EpicGameiGues")
}

tasks.register('buildJar', Exec) {
    commandLine 'cmd', '/c', 'gradlew.bat', 'clean', 'build'
}

tasks.register('packageApp', Exec) {
    def jarName = jar.archiveFileName.get()
    def appVersion = project.version

    def outputDir = "$buildDir/app"

    doFirst {
        file(outputDir).mkdirs()
    }

    commandLine 'jpackage',
            '--input', 'build/libs/',
            '--main-jar', jarName,
            '--main-class', "${mainClass}",
            '--name', "${appName}",
            '--type', 'exe',
            '--win-dir-chooser',
            '--win-shortcut',
            '--win-menu',
            '--app-version', appVersion,
            '--dest', outputDir
}

tasks.register('buildAndPackage') {
    dependsOn 'buildJar'
    dependsOn 'packageApp'
}

// Utility function to get formatted date string
static def getFormattedDateString(Date date) {
    def dateFormat = new SimpleDateFormat("\"yyyy-MM-dd HH:mm:ss\"")
    return dateFormat.format(date)
}

// Function to get date based on mode
static def getStartDate(mode) {
    Calendar calendar = Calendar.getInstance()
    switch (mode) {
        case "last24Hours":
            calendar.add(Calendar.DATE, -1)
            break
        case "lastWeek":
            calendar.add(Calendar.WEEK_OF_YEAR, -1)
            break
        case "lastMonth":
            calendar.add(Calendar.MONTH, -1)
            break
        case "lastYear":
            calendar.add(Calendar.YEAR, -1)
            break
        case "all":
            return null
        default:
            throw new GradleException("Invalid time mode: $mode")
    }
    return getFormattedDateString(calendar.getTime())
}

// Function to get seconds per day based on mode
static def getSecondsPerDay(mode) {
    switch (mode) {
        case "last24Hours":
            return 20
        case "lastWeek":
            return 8
        case "lastMonth":
            return 4
        case "lastYear":
            return 1
        case "all":
            return 1
        default:
            throw new GradleException("Invalid time mode: $mode")
    }
}

tasks.register('gource', Exec) {
    // Set the desired mode
    def mode = 'last24Hours'
    def startDate = getStartDate(mode)
    def secondsPerDay = getSecondsPerDay(mode)

    // Build the list of arguments
    def args = [
            'gource',
            '-f', '-1920x1080',
            '--seconds-per-day', "${secondsPerDay}",
            '--title', "${appName}",
            '--hide', 'mouse,progress',
            '--highlight-colour', 'FFD700',
            '--highlight-user', 'restonic4',
            '--caption-file', 'gource/captions.txt',
            '--font-scale', '2'
    ]

    // Add the start date argument if it's not null
    if (startDate != null) {
        args += ['--start-date', startDate]
    }

    println args.join(' ')

    // Configure the command line
    commandLine 'cmd', '/c', args.join(' ')
}

