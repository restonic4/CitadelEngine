import java.text.SimpleDateFormat

plugins {
    id 'java'
    id 'application'
}

group = "${group}"
version = "${version}"
mainClassName = "${mainClass}"

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    // LWJGL
    implementation platform("org.lwjgl:lwjgl-bom:${lwjglVersion}")

    // JOML - 3D math
    implementation "org.joml:joml:${jomlVersion}"

    // org.json  https://mvnrepository.com/artifact/org.json/json
    implementation group: 'org.json', name: 'json', version: '20240303'

    // LWJGL
    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-glfw"      // Windows management
    implementation "org.lwjgl:lwjgl-opengl"    // OpenGL 3D
    implementation "org.lwjgl:lwjgl-stb"       // Images/assets loader
    implementation "org.lwjgl:lwjgl-openal"    // OpenAL for audio
    implementation "org.lwjgl:lwjgl-assimp" // Assimp for complex models
    //implementation "io.github.spair:imgui-java-binding:${imguiJavaVersion}" // ImGui for GUI


    // LWJGL Windows
    runtimeOnly "org.lwjgl:lwjgl::${lwjglNatives}"
    runtimeOnly "org.lwjgl:lwjgl-glfw::${lwjglNatives}"
    runtimeOnly "org.lwjgl:lwjgl-opengl::${lwjglNatives}"
    runtimeOnly "org.lwjgl:lwjgl-stb::${lwjglNatives}"
    runtimeOnly "org.lwjgl:lwjgl-openal::${lwjglNatives}"
    runtimeOnly "org.lwjgl:lwjgl-assimp::${lwjglNatives}"
    //runtimeOnly "io.github.spair:imgui-java-${imguiNatives}:${imguiJavaVersion}"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jar {
    manifest {
        attributes(
                'Main-Class': "${mainClass}",
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    from('resources') {
        into 'resources'
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveBaseName.set("EpicGameiGues")
}

tasks.register('buildJar', Exec) {
    commandLine 'cmd', '/c', 'gradlew.bat', 'clean', 'build'
}

tasks.register('packageApp', Exec) {
    def jarName = jar.archiveFileName.get()
    def appVersion = project.version

    def outputDir = "$buildDir/app"

    doFirst {
        file(outputDir).mkdirs()
    }

    commandLine 'jpackage',
            '--input', 'build/libs/',
            '--main-jar', jarName,
            '--main-class', "${mainClass}",
            '--name', "${appName}",
            '--type', 'exe',
            '--win-dir-chooser',
            '--win-shortcut',
            '--win-menu',
            '--app-version', appVersion,
            '--dest', outputDir
}

tasks.register('buildAndPackage') {
    dependsOn 'buildJar'
    dependsOn 'packageApp'
}

// Define a map to hold configurations for each mode
def modeConfig = [
        'last24Hours': [dateShift: [Calendar.DATE, -1], secondsPerDay: 20],
        'lastWeek': [dateShift: [Calendar.WEEK_OF_YEAR, -1], secondsPerDay: 8],
        'lastMonth': [dateShift: [Calendar.MONTH, -1], secondsPerDay: 4],
        'lastYear': [dateShift: [Calendar.YEAR, -1], secondsPerDay: 1],
        'all': [dateShift: null, secondsPerDay: 1],
        'allSlow': [dateShift: null, secondsPerDay: 4]
]

// Utility function to get formatted date string
static def getFormattedDateString(Date date) {
    def dateFormat = new SimpleDateFormat("\"yyyy-MM-dd HH:mm:ss Z\"")
    dateFormat.setTimeZone(TimeZone.getDefault())
    return dateFormat.format(date)
}

// Function to get date based on mode
static def getStartDate(mode, modeConfig) {
    def config = modeConfig[mode]
    if (config == null) {
        throw new GradleException("Invalid time mode: $mode")
    }
    if (config.dateShift == null) {
        return null
    }
    Calendar calendar = Calendar.getInstance()
    calendar.add(config.dateShift[0], config.dateShift[1])
    return getFormattedDateString(calendar.getTime())
}

// Function to get seconds per day based on mode
static def getSecondsPerDay(mode, modeConfig) {
    def config = modeConfig[mode]
    if (config == null) {
        throw new GradleException("Invalid time mode: $mode")
    }
    return config.secondsPerDay
}

tasks.register('gource', Exec) {
    // Set the desired mode
    def mode = "${gourceMode}"
    def startDate = getStartDate(mode, modeConfig)
    def secondsPerDay = getSecondsPerDay(mode, modeConfig)

    // Build the list of arguments
    def args = [
            'gource',
            '-f', '-1920x1080',
            '--seconds-per-day', "${secondsPerDay}",
            '--title', "${appName}",
            '--hide', 'mouse,progress',
            '--highlight-colour', 'FFD700',
            '--highlight-user', 'restonic4',
            '--caption-file', 'gource/captions.txt',
            '--font-scale', '2'
    ]

    // Add the start date argument if it's not null
    if (startDate != null) {
        args += ['--start-date', startDate]
    }

    // Configure the command line
    commandLine 'cmd', '/c', args.join(' ')
}

